// Generated by CoffeeScript 2.2.1
(function() {
  var Storage;

  global.Cookie = require('js-cookie');

  Storage = class Storage {
    constructor(COOKIE_KEY = "vuex") {
      this.COOKIE_KEY = COOKIE_KEY;
    }

  };

  Storage.prototype.sset = function(key, value, context) {
    var oldState, req, res;
    if (!context && typeof value === 'object') {
      context = value;
      return this.setJSON(key, context);
    }
    if (!context) {
      throw new Error('context required');
    }
    req = context.req;
    res = context.res;
    global.document = {
      cookie: req.headers.cookie
    };
    oldState = this.getJSON(context);
    oldState[key] = value;
    return this.setJSON(oldState, context);
  };

  Storage.prototype.sget = function(key, context) {
    var ret;
    if (!context && typeof key === 'object') {
      context = key;
      return this.getJSON(context);
    }
    if (!context) {
      throw new Error('context required');
    }
    ret = this.getJSON(context);
    return ret[key];
  };

  Storage.prototype.ssetJSON = function(value, context) {
    var req, res;
    if (!context) {
      throw new Error('context required');
    }
    req = context.req;
    res = context.res;
    global.document = {
      cookie: req.headers.cookie
    };
    if (!value || typeof value !== 'object') {
      value = {};
    }
    Cookie.set(this.COOKIE_KEY, value, {
      expires: 150
    });
    req.headers.cookie = global.document.cookie;
    if (res.getHeader('Set-Cookie')) {
      res.removeHeader('Set-Cookie');
    }
    return res.setHeader('Set-Cookie', global.document.cookie);
  };

  Storage.prototype.sgetJSON = function(context) {
    var req, res, ret;
    if (!context) {
      throw new Error('context required');
    }
    req = context.req;
    res = context.res;
    global.document = {
      cookie: req.headers.cookie
    };
    ret = Cookie.getJSON(this.COOKIE_KEY);
    if (!ret || typeof ret !== 'object') {
      ret = {};
    }
    return ret;
  };

  Storage.prototype.set = function(key, value, context) {
    var oldState;
    if (context && context.isServer) {
      return this.sset(key, value, context);
    }
    if (!value) {
      return this.setJSON(value);
    }
    oldState = this.getJSON();
    oldState[key] = value;
    return this.setJSON(oldState);
  };

  Storage.prototype.get = function(key, context) {
    var ret;
    if (context && context.isServer) {
      return this.sget(key, context);
    }
    if (!key) {
      return this.getJSON();
    }
    ret = this.getJSON();
    return ret[key];
  };

  Storage.prototype.setJSON = function(value, context) {
    if (context && context.isServer) {
      return this.ssetJSON(value, context);
    }
    if (!value || typeof value !== 'object') {
      value = {};
    }
    return Cookie.set(this.COOKIE_KEY, value, {
      expires: 150
    });
  };

  Storage.prototype.getJSON = function(context) {
    var ret;
    if (context && context.isServer) {
      return this.sgetJSON(context);
    }
    ret = Cookie.getJSON(this.COOKIE_KEY);
    if (!ret || typeof ret !== 'object') {
      ret = {};
    }
    return ret;
  };

  module.exports = new Storage;

  module.exports.Storage = Storage;

}).call(this);
